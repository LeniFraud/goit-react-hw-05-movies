{"version":3,"file":"static/js/387.173a9a15.chunk.js","mappings":"0QAEaA,E,OAAOC,GAAAA,GAAH,+E,SCIF,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QA6BR,OA3BAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAEjBC,EAAO,mCAAG,sGAEZR,GAAW,GAFC,UAGuBS,EAAAA,EAAAA,IACjCN,EACAG,EAAWI,QALD,mBAGJC,EAHI,EAGJA,UAHI,EAGMC,OAHN,iDAQZd,EAAQa,GARI,kDAUZT,EAAS,EAAD,IAVI,yBAYZF,GAAW,GAZC,6EAAH,qDAiBb,OADAQ,IACO,kBAAMF,EAAWO,OAAjB,CACR,GAAE,CAACV,KAEJE,EAAAA,EAAAA,YAAU,WACJJ,IAAOa,EAAAA,EAAAA,KACZ,GAAE,CAACb,KAGF,gCACGF,IAAW,SAAC,KAAD,IACXF,IACC,wBACGA,EAAKkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAAC1B,EAAD,YACE,gBAAK2B,IAAKD,EAAcE,IAAKJ,KAC7B,0BACE,uBAAIA,IADN,QACmB,gCAAQC,EAAR,YAHVF,EADH,MAUI,KAAb,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMyB,UAAgB,0DAG5B,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components';\nimport { getMovieCast, alertOnError } from 'services';\nimport { Item } from './Cast.styled';\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const getCast = async () => {\n      try {\n        setLoading(true);\n        const { castInfo, cancel } = await getMovieCast(\n          movieId,\n          controller.signal\n        );\n        if (cancel) return;\n        setCast(castInfo);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCast();\n    return () => controller.abort();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error) alertOnError();\n  }, [error]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {cast && (\n        <ul>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <Item key={id}>\n              <img src={profile_path} alt={name} />\n              <p>\n                <b>{name}</b> as <span>\"{character}\"</span>\n              </p>\n            </Item>\n          ))}\n        </ul>\n      )}\n      {cast?.length === 0 && <p>There is no info about cast.</p>}\n    </>\n  );\n}\n"],"names":["Item","styled","Cast","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","controller","AbortController","getCast","getMovieCast","signal","castInfo","cancel","abort","alertOnError","map","id","name","character","profile_path","src","alt","length"],"sourceRoot":""}