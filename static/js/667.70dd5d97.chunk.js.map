{"version":3,"file":"static/js/667.70dd5d97.chunk.js","mappings":"gRAUe,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,GAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,GAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAA0BR,EAAAA,EAAAA,UAAS,MAAnC,eAAOS,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAS,mCAAG,wGAEdT,GAAW,GAFG,UAGyBU,EAAAA,EAAAA,IAAkBJ,EAAOX,GAHlD,mBAGNF,EAHM,EAGNA,OAAQI,EAHF,EAGEA,cAChBc,EAAAA,EAAAA,IAAclB,EAAOmB,OAAQf,GACR,IAAjBA,EALU,0CAKiBQ,EAAgB,KALjC,QAMdX,GAAU,SAAAmB,GAAU,wBAAQA,IAAR,OAAuBpB,GAAvB,IACpBK,EAAgBD,GAPF,kDASdK,EAAS,EAAD,IATM,yBAWdF,GAAW,GAXG,6EAAH,qDAefS,GAjBkB,CAkBnB,GAAE,CAACd,EAAMW,EAAOD,KAEjBG,EAAAA,EAAAA,YAAU,WACJP,IAAOa,EAAAA,EAAAA,KACZ,GAAE,CAACb,IAcJ,OACE,6BACE,SAAC,KAAD,CAAYc,SAdS,SAAAC,GACvB,IAAMC,EAAkBD,EAAYE,OAAOC,cAC3C,GAAIF,IAAoBX,EAAO,OAAOc,EAAAA,EAAAA,IAAqBd,GAE3DZ,EAAU,IACVW,EAAgB,CAAEC,MAAOW,IACzBrB,EAAQ,GACRE,EAAgB,EACjB,IAOIC,IAAW,SAAC,KAAD,MACTN,EAAOmB,SAAU,SAAC,KAAD,CAAenB,OAAQA,EAAQ4B,KAAM,KACxDxB,EAAe,KAAM,SAAC,KAAD,CAAYyB,QAPX,kBAAM1B,GAAQ,SAAA2B,GAAQ,OAAIA,EAAW,CAAf,GAAtB,MAU5B,C","sources":["pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchForm, LoadButton, MoviesGallery, Loader } from 'components';\nimport {\n  getSearchedMovies,\n  alertOnSearch,\n  alertOnRepeatedQuery,\n  alertOnError,\n} from 'services';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const getMovies = async () => {\n      try {\n        setLoading(true);\n        const { movies, totalResults } = await getSearchedMovies(query, page);\n        alertOnSearch(movies.length, totalResults);\n        if (totalResults === 0) return setSearchParams('');\n        setMovies(prevMovies => [...prevMovies, ...movies]);\n        setTotalResults(totalResults);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getMovies();\n  }, [page, query, setSearchParams]);\n\n  useEffect(() => {\n    if (error) alertOnError();\n  }, [error]);\n\n  const searchFormSubmit = searchQuery => {\n    const normalizedQuery = searchQuery.trim().toLowerCase();\n    if (normalizedQuery === query) return alertOnRepeatedQuery(query);\n\n    setMovies([]);\n    setSearchParams({ query: normalizedQuery });\n    setPage(1);\n    setTotalResults(0);\n  };\n\n  const onLoadMoreBtnClick = () => setPage(prevPage => prevPage + 1);\n\n  return (\n    <main>\n      <SearchForm onSubmit={searchFormSubmit} />\n      {loading && <Loader />}\n      {!!movies.length && <MoviesGallery movies={movies} path={''} />}\n      {totalResults > 20 && <LoadButton onClick={onLoadMoreBtnClick} />}\n    </main>\n  );\n}\n"],"names":["MoviesPage","useState","movies","setMovies","page","setPage","totalResults","setTotalResults","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getMovies","getSearchedMovies","alertOnSearch","length","prevMovies","alertOnError","onSubmit","searchQuery","normalizedQuery","trim","toLowerCase","alertOnRepeatedQuery","path","onClick","prevPage"],"sourceRoot":""}